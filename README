不同的子域名分配不同的项目
底下分若干有关系的子项目 如 admin www api
每个子项目启用不同的子域名 admin.a.com  www.a.com api.a.com
每一个子项目可以是单模块 也可以是多模块  也可以多层控制器
除了共用基层方法和配置文件外 每个项目保持很大的独立性
每个子域名session不共用

###关于配置
1、公共配置 /common/config 目录下
    config.php //公共配置 所有子项目都有可能用到的 比如数据库配置
    local.config.php //本地配置文件 使用git忽略，不提交版本库。 每个开发者需要自己临时配置配置信息时应该在这个文件修改
2、项目配置
    项目/config 目录下
    基本和公共配置一样
    多了router.php　每个项目路由必定不一样单独路由文件 控制器分层需要这里配置下
        modules.php　需要多模块这里配置模块
        loader.php　自定加载器

### 模块名 多层控制器目录  基本控制器名 不能重复 匹配url优先 模块名  其次  多层控制器目录  最后  基本控制器名



###错误信息处理
    1、ajax请求   1、请求返回html页面 url参数带 dataType=html  2、json数据
    2、普通web请求
    {
        'status':'sucess|error',
        'msg':'XXXXX',
        'data':'前端需要的数据',
        'errinput':'字段错误提示信息'
        'nextUrl':'下一步需要执行跳转的url'
    }
    1.1 2处理方式  输出错误信息模板   公共方法   msg('err')
    1.2 输出json 数据          sendJson(status)
    不管哪里输出信息 都是应该结束当前业务 而不是整个框架流程  怎么办？ 通过return 调用方式 可以终结当前业务
                                                            return $this->msg()  return $this->sendJson()

###信息输出
    ##解析模板输出   return $this->render();$this->actionRender();  控制器分层需要指定控制名称
    ##json数据输出 return $this->sendJson() 还有两个方便的封装方法





###session
session采用redis   键值：session:项目名:sessionId  如 session:admin:sessionId
不必要的缓存采用redis  键值： cache:项目名:缓存id  如： cache:admin:缓存id
不必要的数据 储存在mongo或者文本文件    需要统计分析的mongo  偶尔需要查看的文本文件

#### 数据使用规范
一般数据储存在mysql 数据库共用
表明 字段名 全部小写用下划线分割
主键同意id  外键 表明_id
常用规范
  1、时间:int
  time：unix时间戳   start_time：开始时间  end_time 结束时间  create_time 数据创建时间  update_time  数据更新时间
  delete_time 删除时间....
  2、状态之类的枚举 tinyint(1)
   status:状态
   type:类型
   用数字表示约定的几种状态 1:新建 2:更新  3:完成 （尽量不要使用0，必须写注释）
   这类型的字段同时用常量些写进model中  const STATUS=[1=>'新建',2=>'更新',3=>'完成']
  3.title：标题 名称   name：姓名    content:内容
    img：图片   pre_img 预览图   big_img 大图  small_img 小图
    keywords：关键词   description：描述
    other:备注   cls:排序   pid:上级id  ip：ip地址
  4.isdel 是否删除 默认0代表正常数据  1代表已被删除
  5.is_***   是否可用等等
逻辑规范:
   1、控制器中尽量避免直接操作模型 尽量通过服务仓库 操作
   2、仅仅是查找数据列表展示 不用orm  直接在仓库$this->modelsManager->createBuilder()创建查询并返回array
   3、涉及到插入 更新 删除数据的操作 一定使用orm 需要连表数据或者连表操作时 使用模型关联 一定不用join